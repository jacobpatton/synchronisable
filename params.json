{"name":"Synchronisable","tagline":"Provides base fuctionality (models, DSL) for AR synchronization with external resources (apis, services etc)","body":"[![Build Status](https://travis-ci.org/vyorkin/synchronisable.png?branch=master)](https://travis-ci.org/vyorkin/synchronisable)\r\n[![Code Climate](https://codeclimate.com/github/vyorkin/synchronisable.png)](https://codeclimate.com/github/vyorkin/synchronisable)\r\n[![Inline docs](http://inch-pages.github.io/github/vyorkin/synchronisable.png)](http://inch-pages.github.io/github/vyorkin/synchronisable)\r\n[![Coverage Status](https://coveralls.io/repos/vyorkin/synchronisable/badge.png)](https://coveralls.io/r/vyorkin/synchronisable)\r\n[![Gem Version](http://stillmaintained.com/vyorkin/synchronisable.png)](http://stillmaintained.com/vyorkin/synchronisable)\r\n[![Dependency Status](https://gemnasium.com/vyorkin/synchronisable.svg)](https://gemnasium.com/vyorkin/synchronisable)\r\n\r\n# Synchronisable\r\n\r\nProvides base fuctionality (models, DSL) for AR synchronization\r\nwith external resources (apis, services etc).\r\n\r\n## Overview\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'synchronisable'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install synchronisable\r\n\r\n## Usage\r\n\r\nFor examples we'll be using a well-known domain with posts & comments\r\n\r\n```ruby\r\nclass Post < ActiveRecord::Base\r\n  has_many :comments\r\n\r\n  synchronisable\r\nend\r\n\r\nclass Comment < ActiveRecord::Base\r\n  belongs_to :post\r\n\r\n  synchronisable MyCommentSynchronizer\r\nend\r\n```\r\n\r\nAs you can see above the first step is to declare your models to be\r\nsynchronisable. You can do so by using corresponding dsl instruction,\r\nthat optionally takes a synchonizer class to be used. Actually,\r\nthe only reason to specify it its when it has a name, that can't be figured out\r\nby the following convention: `ModelSynchronizer`.\r\n\r\nAfter that you should define your model synchronizers\r\n\r\n```ruby\r\nclass PostSynchronizer < Synchronisable::Synchronizer\r\n  remote_id :p_id\r\n\r\n  mappings(\r\n    :t => :title,\r\n    :c => :content\r\n  )\r\n\r\n  except :ignored_attr1, :ignored_attr42\r\n\r\n  has_many :comments\r\n\r\n  fetch do\r\n    # return array of hashes with\r\n    # remote entity attributes\r\n  end\r\n\r\n  find do |id|\r\n    # return a hash with\r\n    # with remote entity attributes\r\n  end\r\n\r\n  # Hooks/callbacks\r\n\r\n  before_record_sync do |source|\r\n    # ...\r\n  end\r\n\r\n  after_record_sync do |source|\r\n    # ...\r\n  end\r\n\r\n  before_association_sync do |source, remote_id, association|\r\n    # ...\r\n  end\r\n\r\n  after_association_sync do |source, remote_id, association|\r\n    # ...\r\n  end\r\n\r\n  before_sync do |source|\r\n    # ...\r\n  end\r\n\r\n  after_sync do |source|\r\n    # ...\r\n  end\r\nend\r\n\r\nclass MyCommentSynchronizer < Synchronisable::Synchronizer\r\n  remote_id :c_id\r\n\r\n  mappings(\r\n    :a => :author,\r\n    :t => :body\r\n  )\r\n\r\n  only :author, :body\r\n\r\n  fetch do\r\n    # ...\r\n  end\r\n\r\n  find do |id|\r\n    # ...\r\n  end\r\n\r\nend\r\n```\r\n\r\nTo start synchronization\r\n\r\n```ruby\r\nPost.sync\r\n```\r\n\r\nP.S.: i promise i'll finish this later, soon, this week, promise!\r\n\r\n## Support\r\n\r\n<a href='https://www.codersclan.net/task/yorkinv' target='_blank'><img src='https://www.codersclan.net/button/yorkinv' alt='expert-button' width='205' height='64' style='width: 205px; height: 64px;'></a>\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}